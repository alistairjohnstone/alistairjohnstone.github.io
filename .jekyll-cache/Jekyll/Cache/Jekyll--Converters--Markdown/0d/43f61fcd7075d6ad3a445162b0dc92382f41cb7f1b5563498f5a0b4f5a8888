I"Ö;<p>Hereâ€™s how you can use Facebookâ€™s open-source Prophet library in Google Sheets to create  accurate time-series predictions using simple and intuitive parameters.</p>

<amp-img src="/assets/images/sheets-prophet.png" width="1280" height="720" layout="responsive"></amp-img>

<p>This is a proof-of-concept solution for Prophet forecasting in Google Sheets. You may want to build on this to include additional parameters that will give you greater control over the forecast model.</p>

<h2 id="what-is-facebook-prophet">What is Facebook Prophet?</h2>

<p>Prophet is open source software released by Facebookâ€™s Core Data Science team. It is a procedure for forecasting time series data and works best with time series that have strong seasonal effects and several seasons of historical data. It is available for download on CRAN and PyPI.</p>

<h2 id="overview">Overview</h2>

<p>Hereâ€™s an overview of the data flow for this solution:</p>

<p>IMAGE OF DATA FLOW</p>

<p>As you can see itâ€™s pretty straightforward, the user fills in the custom function and those variables are sent off to our Python script for forecasting and the results returned to Google Sheets.</p>

<h2 id="step-1-lets-build-our-own-api">Step 1: Letâ€™s build our own API</h2>

<p>Weâ€™ll be building our own API using FastAPI, which is a modern, fast (high-performance), web framework for building APIs with Python. This will take parameters from the Google Sheets function and do all the forecasting in the background with Facebook Prophet:</p>

<figure class="highlight">
  <pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">fastapi</span> <span class="kn">import</span> <span class="n">FastAPI</span>
<span class="kn">from</span> <span class="nn">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="nn">fbprophet</span> <span class="kn">import</span> <span class="n">Prophet</span>

<span class="k">class</span> <span class="nc">Data</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">length</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">ds</span><span class="p">:</span> <span class="nb">list</span>
    <span class="n">y</span><span class="p">:</span> <span class="nb">list</span>
    <span class="n">model</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">changepoint</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.5</span>
    <span class="n">daily</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">weekly</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">annual</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">upper</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">lower</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">national_holidays</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="bp">None</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">FastAPI</span><span class="p">()</span>

<span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s">"/prophecise/"</span><span class="p">)</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">create_item</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">):</span>

    <span class="c1"># Create df from base model
</span>    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ds</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">y</span><span class="p">)),</span> <span class="n">columns</span> <span class="o">=</span><span class="p">[</span><span class="s">'ds'</span><span class="p">,</span> <span class="s">'y'</span><span class="p">])</span>

    <span class="c1"># Add the cap and floor to df for logistic model
</span>    <span class="k">if</span> <span class="n">data</span><span class="p">.</span><span class="n">model</span> <span class="o">==</span> <span class="s">"logistic"</span><span class="p">:</span>
        <span class="n">df</span><span class="p">[</span><span class="s">'y'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">-</span> <span class="n">df</span><span class="p">[</span><span class="s">'y'</span><span class="p">]</span>
        <span class="n">df</span><span class="p">[</span><span class="s">'cap'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">upper</span>
        <span class="n">df</span><span class="p">[</span><span class="s">'floor'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">lower</span>

    <span class="c1"># make basic prediction
</span>    <span class="n">m</span> <span class="o">=</span> <span class="n">Prophet</span><span class="p">(</span><span class="n">growth</span><span class="o">=</span><span class="n">data</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
                <span class="n">changepoint_prior_scale</span><span class="o">=</span><span class="n">data</span><span class="p">.</span><span class="n">changepoint</span><span class="p">,</span>
                <span class="n">weekly_seasonality</span><span class="o">=</span><span class="n">data</span><span class="p">.</span><span class="n">weekly</span><span class="p">,</span>
                <span class="n">daily_seasonality</span><span class="o">=</span><span class="n">data</span><span class="p">.</span><span class="n">daily</span><span class="p">,</span>
                <span class="n">yearly_seasonality</span><span class="o">=</span><span class="n">data</span><span class="p">.</span><span class="n">annual</span>
                <span class="p">)</span>
    
    <span class="c1"># Add national holidays
</span>    <span class="k">if</span> <span class="n">data</span><span class="p">.</span><span class="n">national_holidays</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">m</span><span class="p">.</span><span class="n">add_country_holidays</span><span class="p">(</span><span class="n">country_name</span><span class="o">=</span><span class="n">data</span><span class="p">.</span><span class="n">national_holidays</span><span class="p">)</span>
    
    <span class="c1"># Fit data frame
</span>    <span class="n">m</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>

    <span class="c1"># Create data frame for future
</span>    <span class="n">future</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">make_future_dataframe</span><span class="p">(</span><span class="n">periods</span><span class="o">=</span><span class="n">data</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>

    <span class="c1"># Add the cap and floor to future for logistic model
</span>    <span class="k">if</span> <span class="n">data</span><span class="p">.</span><span class="n">model</span> <span class="o">==</span> <span class="s">"logistic"</span><span class="p">:</span>
        <span class="n">future</span><span class="p">[</span><span class="s">'cap'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">upper</span>
        <span class="n">future</span><span class="p">[</span><span class="s">'floor'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">lower</span>

    <span class="c1"># Prophecise!
</span>    <span class="n">forecast</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">future</span><span class="p">)</span>

    <span class="c1"># Print values
</span>    <span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">forecast</span><span class="p">[[</span><span class="s">'ds'</span><span class="p">]].</span><span class="n">values</span><span class="p">))</span>

    <span class="c1"># Return results
</span>    <span class="c1"># {'ds': forecast[['ds']], 'yhat': forecast[['yhat']], 'yhat_lower': forecast[['yhat_lower']], 'yhat_upper': forecast[['yhat_upper']] }
</span>    <span class="k">return</span> <span class="p">[</span><span class="n">forecast</span><span class="p">[[</span><span class="s">'ds'</span><span class="p">]],</span> <span class="n">forecast</span><span class="p">[[</span><span class="s">'yhat'</span><span class="p">]],</span> <span class="n">forecast</span><span class="p">[[</span><span class="s">'yhat_lower'</span><span class="p">]],</span> <span class="n">forecast</span><span class="p">[[</span><span class="s">'yhat_upper'</span><span class="p">]]]</span></code></pre>
</figure>

<h2 id="upload-your-api-app-to-google-cloud-platform">Upload your API app to Google Cloud Platform</h2>
<p>Weâ€™ll be running our API on Google Cloud Platform using Cloud Run, which is a fully managed compute platform for deploying and scaling containerized applications quickly and securely.</p>

<p>So first of all we need to containerize our app using Docker. If youâ€™re not familiar with Docker then Iâ€™d recommend taking a look at their documentation. To do this youâ€™ll need to create a Dockerfile:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7

COPY ./app /app

WORKDIR /app

RUN apt-get -y update  &amp;&amp; apt-get install -y \
  python3-dev \
  apt-utils \
  python-dev \
  build-essential \
&amp;&amp; rm -rf /var/lib/apt/lists/*

RUN pip install --upgrade setuptools
RUN pip install cython
RUN pip install numpy
RUN pip install pandas
RUN pip install matplotlib
RUN pip install pystan
RUN pip install fbprophet
RUN pip install fastapi
RUN pip install pydantic
</code></pre></div></div>

<p>Once youâ€™ve deployed to Cloud Run, youâ€™ll be given a URL which is used as the API endpoint, which we can use in our Apps Script.</p>

<p>IMAGE OF CLOUDRUN ENDPOINT</p>

<h2 id="finally-we-use-apps-script-to-call-our-api">Finally, we use Apps Script to call our API</h2>
<p>Now weâ€™re ready to set up our custom function for Sheets in Apps Script. Weâ€™ll take the user inputs from our custom function and send these on to our API for forecasting.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/**
 * Forecast data using Facebook Prophet. Upper and Lower bounds are only required when using the logistic regression model. More information can be found at https://facebook.github.io/prophet/
 *
 * @param {A2:A150} dates - Select the pre-forecast date range as a STRING
 * @param {B2:B150} values - Select the pre-forecast metric values as a STRING
 * @param {14} forecastLength - How many days would you like to forecast?
 * @param {"linear"} model - "linear" or "logistic"
 * @param {"True"} annual - Does data contain annual seasonality? true or false
 * @param {"False"} weekly - Does data contain weekly seasonality? true or false
 * @param {"False"} daily - Does data contain daily seasonality? true or false
 * @param {""} upper - Select the pre-forecast date range (Only required for logistic regression model)
 * @param {""} lower - Select the pre-forecast date range (Only required for logistic regression model)
 * @param {"UK"} nationalHolidays - ISO of country you'd like to add national holidays for e.g. "UK" 
 * @return Facebook Prophet Forecast.
 * @customfunction
 */

function prophecise(dates, values, forecastLength, model, annual, weekly, daily, nationalHolidays, upper, lower) {
  
	//  API endpoint
	var url = 'YOUR_CLOUD_RUN_URL';
  
	// Format the date and values  
	var dates = SpreadsheetApp.getActiveSpreadsheet().getRange(dates).getDisplayValues().join().split(','),
        dates = dates.filter(String),
        values = SpreadsheetApp.getActiveSpreadsheet().getRange(values).getDisplayValues().join().split(','),
        values = values.filter(String),
        formattedDates = dates.join().split(','),
        formattedMetrics = values.join().split(','),
        preforecastData = {
		"length": forecastLength,
		"ds": formattedDates,
		"y": formattedMetrics,
		"model": model.toLowerCase(),
		"annual": annual.toString().toLowerCase(),
		"weekly": weekly.toString().toLowerCase(),
		"daily": daily.toString().toLowerCase(),
		"upper": upper,
		"lower": lower,
		"national_holidays": nationalHolidays
	};
  
	// Add the pre-forecast data to the payload
	var options = {
		'method': 'post',
		'contentType': 'json',
		'payload': JSON.stringify(preforecastData)
	};
  
	// Call prophecise API
	var response = UrlFetchApp.fetch(url, options);
  
	// Return forecast result
	var json = JSON.parse(response)
	var dates = Object.values(json[0].ds);
	var forecast = Object.values(json[1].yhat);
	var forecastresult = [];
	dates.forEach(function(date) {
		forecastresult.push([date]);
	});
	forecast.forEach(function(yhat, index) {
		forecastresult[index].push(yhat);
	})
	forecastresult.splice(0, 0, ["Date", "Forecast"]);
	return forecastresult;
  
}
</code></pre></div></div>

<h2 id="using-the-formula-in-google-sheets">Using the formula in Google Sheets</h2>
<p>Iâ€™ve been using the formula to forecast Google Analytics data in Google Sheets using the Google Analytics add-on and our custom function. So for example, the following function would take the dates from column A and the metrics in column B and return a 30 day forecast that takes in to account national holidays in the UK:</p>

<p><code class="language-plaintext highlighter-rouge">=prophecise("A2:A","B2:B",30,"linear",true,false,false,"UK")</code></p>

<p>In this example I then used the Prophet forecasts in a Google Data Studio dashboard to show predicted trends for KPIs.</p>

<p>Hopefully you found this post useful and it has inspired you to start using your own Python/R functions in Google Sheets, the possibilities are endless!</p>

:ET